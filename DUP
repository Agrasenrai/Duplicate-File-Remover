import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;
import java.io.FileInputStream;
import java.io.IOException;
public class DuplicateFileRemover extends JFrame {
    private JButton selectButton;
    private JButton deleteButton;
    private JTextArea logTextArea;
    private JFileChooser fileChooser;
    private Map<String, File> fileMap;
    private File duplicateFile;
    private String deletedFileName;
    private final Connection connection;
    public DuplicateFileRemover() {
        try {
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/newnew", "root", "qwertyuioP");
        } catch (SQLException sqle) {
            sqle.printStackTrace();
            throw new RuntimeException("Failed");
        }
        setTitle("Duplicate File Remover");
        setSize(400, 300);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        selectButton = new JButton("Select Directory");
        deleteButton = new JButton("Delete Duplicates");
        logTextArea = new JTextArea();
        fileChooser = new JFileChooser();
        fileMap = new HashMap<>();

        selectButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                int result = fileChooser.showOpenDialog(DuplicateFileRemover.this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    File directory = fileChooser.getSelectedFile();
                    logTextArea.setText("Selected directory: " + directory.getAbsolutePath());
                    scanDirectory(directory);
                }
            }
        });

        deleteButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                deleteDuplicateFiles();
            }
        });

        add(selectButton, BorderLayout.NORTH);
        add(new JScrollPane(logTextArea), BorderLayout.CENTER);
        add(deleteButton, BorderLayout.SOUTH);
    }

    private String calculateFileHash(File file) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] dataBytes = new byte[1024];

            try (FileInputStream fis = new FileInputStream(file)) {
                int nread;
                while ((nread = fis.read(dataBytes)) != -1) {
                    md.update(dataBytes, 0, nread);
                }
            }

            byte[] mdbytes = md.digest();

            StringBuilder sb = new StringBuilder();
            for (byte mdbyte : mdbytes) {
                sb.append(Integer.toString((mdbyte & 0xff) + 0x100, 16).substring(1));
            }

            return sb.toString();
        } catch (NoSuchAlgorithmException | IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    private void scanDirectory(File directory) {
        fileMap.clear();
        logTextArea.append("\nScanning directory for duplicates...\n");

        File[] files = directory.listFiles();
        for (File file : files) {
            if (file.isFile()) {
                String hash = calculateFileHash(file);
                if (hash != null) {
                    long fileSize = file.length();
                    String key = hash + fileSize; // Combine hash and file size
                    if (fileMap.containsKey(key)) {
                        duplicateFile = fileMap.get(key); // Store the duplicate file
                        logTextArea.append("Duplicate found: " + file.getAbsolutePath() + "\n");
                        logTextArea.append("Duplicate to Delete: " + duplicateFile.getAbsolutePath() + "\n");
                    } else {
                        fileMap.put(key, file);
                    }
                }
            }
        }
        logTextArea.append("Duplicate scan completed.\n");
    }

    private void deleteDuplicateFiles() {
        logTextArea.append("\nDeleting duplicate files...\n");
        if (duplicateFile != null) { // Check if a duplicate file was found
            if (duplicateFile.exists()) {
                logTextArea.append("Deleting file: " + duplicateFile.getAbsolutePath() + "\n");
                deletedFileName = duplicateFile.getName();
                
                // Get the size of the deleted file
                long fileSize = duplicateFile.length();

                // Insert the file name and size into the database
                insertDeletedFileDetails(deletedFileName, fileSize);
                duplicateFile.delete();
                logTextArea.append("File deleted: " + deletedFileName + "\n");
            }
        }

        logTextArea.append("Duplicate files deleted.\n");
    }

    private void insertDeletedFileDetails(String fileName, long fileSize) {
        try {
            Statement statement = connection.createStatement();
            String sql = "INSERT INTO file_det (file_name, file_size) VALUES ('" + fileName + "', " + fileSize + ")";
            statement.executeUpdate(sql);
            statement.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                DuplicateFileRemover duplicateFileRemover = new DuplicateFileRemover();
                duplicateFileRemover.setVisible(true);
            }
        });
    }
}
